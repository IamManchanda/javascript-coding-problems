export const sharedTests = (getSolution) => {
  let solution, input, expectedOutput;

  beforeEach(() => {
    solution = getSolution();
    input = {};
    expectedOutput = undefined;
  });

  test(`Test Case 1: {
    "input": { "array": [1, 2, 3] },
    "expectedOutput": [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
  }`, () => {
    input = {
      array: [1, 2, 3],
    };
    expectedOutput = [
      [1, 2, 3],
      [1, 3, 2],
      [2, 1, 3],
      [2, 3, 1],
      [3, 1, 2],
      [3, 2, 1],
    ];
  });

  test(`Test Case 2: {
    "input": { "array": [] },
    "expectedOutput": []
  }`, () => {
    input = {
      array: [],
    };
    expectedOutput = [];
  });

  test(`Test Case 3: {
    "input": { "array": [1] },
    "expectedOutput": [[1]]
  }`, () => {
    input = {
      array: [1],
    };
    expectedOutput = [[1]];
  });

  test(`Test Case 4: {
    "input": { "array": [1, 2] },
    "expectedOutput": [[1, 2], [2, 1]]
  }`, () => {
    input = {
      array: [1, 2],
    };
    expectedOutput = [
      [1, 2],
      [2, 1],
    ];
  });

  test(`Test Case 5: {
    "input": { "array": [1, 2, 3, 4] },
    "expectedOutput": [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]]
  }`, () => {
    input = {
      array: [1, 2, 3, 4],
    };
    expectedOutput = [
      [1, 2, 3, 4],
      [1, 2, 4, 3],
      [1, 3, 2, 4],
      [1, 3, 4, 2],
      [1, 4, 2, 3],
      [1, 4, 3, 2],
      [2, 1, 3, 4],
      [2, 1, 4, 3],
      [2, 3, 1, 4],
      [2, 3, 4, 1],
      [2, 4, 1, 3],
      [2, 4, 3, 1],
      [3, 1, 2, 4],
      [3, 1, 4, 2],
      [3, 2, 1, 4],
      [3, 2, 4, 1],
      [3, 4, 1, 2],
      [3, 4, 2, 1],
      [4, 1, 2, 3],
      [4, 1, 3, 2],
      [4, 2, 1, 3],
      [4, 2, 3, 1],
      [4, 3, 1, 2],
      [4, 3, 2, 1],
    ];
  });

  test(`Test Case 6: {
    "input": { "array": [1, 2, 3, 4, 5] },
    "expectedOutput": [[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 2, 4, 3, 5], [1, 2, 4, 5, 3], [1, 2, 5, 3, 4], [1, 2, 5, 4, 3], [1, 3, 2, 4, 5], [1, 3, 2, 5, 4], [1, 3, 4, 2, 5], [1, 3, 4, 5, 2], [1, 3, 5, 2, 4], [1, 3, 5, 4, 2], [1, 4, 2, 3, 5], [1, 4, 2, 5, 3], [1, 4, 3, 2, 5], [1, 4, 3, 5, 2], [1, 4, 5, 2, 3], [1, 4, 5, 3, 2], [1, 5, 2, 3, 4], [1, 5, 2, 4, 3], [1, 5, 3, 2, 4], [1, 5, 3, 4, 2], [1, 5, 4, 2, 3], [1, 5, 4, 3, 2], [2, 1, 3, 4, 5], [2, 1, 3, 5, 4], [2, 1, 4, 3, 5], [2, 1, 4, 5, 3], [2, 1, 5, 3, 4], [2, 1, 5, 4, 3], [2, 3, 1, 4, 5], [2, 3, 1, 5, 4], [2, 3, 4, 1, 5], [2, 3, 4, 5, 1], [2, 3, 5, 1, 4], [2, 3, 5, 4, 1], [2, 4, 1, 3, 5], [2, 4, 1, 5, 3], [2, 4, 3, 1, 5], [2, 4, 3, 5, 1], [2, 4, 5, 1, 3], [2, 4, 5, 3, 1], [2, 5, 1, 3, 4], [2, 5, 1, 4, 3], [2, 5, 3, 1, 4], [2, 5, 3, 4, 1], [2, 5, 4, 1, 3], [2, 5, 4, 3, 1], [3, 1, 2, 4, 5], [3, 1, 2, 5, 4], [3, 1, 4, 2, 5], [3, 1, 4, 5, 2], [3, 1, 5, 2, 4], [3, 1, 5, 4, 2], [3, 2, 1, 4, 5], [3, 2, 1, 5, 4], [3, 2, 4, 1, 5], [3, 2, 4, 5, 1], [3, 2, 5, 1, 4], [3, 2, 5, 4, 1], [3, 4, 1, 2, 5], [3, 4, 1, 5, 2], [3, 4, 2, 1, 5], [3, 4, 2, 5, 1], [3, 4, 5, 1, 2], [3, 4, 5, 2, 1], [3, 5, 1, 2, 4], [3, 5, 1, 4, 2], [3, 5, 2, 1, 4], [3, 5, 2, 4, 1], [3, 5, 4, 1, 2], [3, 5, 4, 2, 1], [4, 1, 2, 3, 5], [4, 1, 2, 5, 3], [4, 1, 3, 2, 5], [4, 1, 3, 5, 2], [4, 1, 5, 2, 3], [4, 1, 5, 3, 2], [4, 2, 1, 3, 5], [4, 2, 1, 5, 3], [4, 2, 3, 1, 5], [4, 2, 3, 5, 1], [4, 2, 5, 1, 3], [4, 2, 5, 3, 1], [4, 3, 1, 2, 5], [4, 3, 1, 5, 2], [4, 3, 2, 1, 5], [4, 3, 2, 5, 1], [4, 3, 5, 1, 2], [4, 3, 5, 2, 1], [4, 5, 1, 2, 3], [4, 5, 1, 3, 2], [4, 5, 2, 1, 3], [4, 5, 2, 3, 1], [4, 5, 3, 1, 2], [4, 5, 3, 2, 1], [5, 1, 2, 3, 4], [5, 1, 2, 4, 3], [5, 1, 3, 2, 4], [5, 1, 3, 4, 2], [5, 1, 4, 2, 3], [5, 1, 4, 3, 2], [5, 2, 1, 3, 4], [5, 2, 1, 4, 3], [5, 2, 3, 1, 4], [5, 2, 3, 4, 1], [5, 2, 4, 1, 3], [5, 2, 4, 3, 1], [5, 3, 1, 2, 4], [5, 3, 1, 4, 2], [5, 3, 2, 1, 4], [5, 3, 2, 4, 1], [5, 3, 4, 1, 2], [5, 3, 4, 2, 1], [5, 4, 1, 2, 3], [5, 4, 1, 3, 2], [5, 4, 2, 1, 3], [5, 4, 2, 3, 1], [5, 4, 3, 1, 2], [5, 4, 3, 2, 1]]
  }`, () => {
    input = {
      array: [1, 2, 3, 4, 5],
    };
    expectedOutput = [
      [1, 2, 3, 4, 5],
      [1, 2, 3, 5, 4],
      [1, 2, 4, 3, 5],
      [1, 2, 4, 5, 3],
      [1, 2, 5, 3, 4],
      [1, 2, 5, 4, 3],
      [1, 3, 2, 4, 5],
      [1, 3, 2, 5, 4],
      [1, 3, 4, 2, 5],
      [1, 3, 4, 5, 2],
      [1, 3, 5, 2, 4],
      [1, 3, 5, 4, 2],
      [1, 4, 2, 3, 5],
      [1, 4, 2, 5, 3],
      [1, 4, 3, 2, 5],
      [1, 4, 3, 5, 2],
      [1, 4, 5, 2, 3],
      [1, 4, 5, 3, 2],
      [1, 5, 2, 3, 4],
      [1, 5, 2, 4, 3],
      [1, 5, 3, 2, 4],
      [1, 5, 3, 4, 2],
      [1, 5, 4, 2, 3],
      [1, 5, 4, 3, 2],
      [2, 1, 3, 4, 5],
      [2, 1, 3, 5, 4],
      [2, 1, 4, 3, 5],
      [2, 1, 4, 5, 3],
      [2, 1, 5, 3, 4],
      [2, 1, 5, 4, 3],
      [2, 3, 1, 4, 5],
      [2, 3, 1, 5, 4],
      [2, 3, 4, 1, 5],
      [2, 3, 4, 5, 1],
      [2, 3, 5, 1, 4],
      [2, 3, 5, 4, 1],
      [2, 4, 1, 3, 5],
      [2, 4, 1, 5, 3],
      [2, 4, 3, 1, 5],
      [2, 4, 3, 5, 1],
      [2, 4, 5, 1, 3],
      [2, 4, 5, 3, 1],
      [2, 5, 1, 3, 4],
      [2, 5, 1, 4, 3],
      [2, 5, 3, 1, 4],
      [2, 5, 3, 4, 1],
      [2, 5, 4, 1, 3],
      [2, 5, 4, 3, 1],
      [3, 1, 2, 4, 5],
      [3, 1, 2, 5, 4],
      [3, 1, 4, 2, 5],
      [3, 1, 4, 5, 2],
      [3, 1, 5, 2, 4],
      [3, 1, 5, 4, 2],
      [3, 2, 1, 4, 5],
      [3, 2, 1, 5, 4],
      [3, 2, 4, 1, 5],
      [3, 2, 4, 5, 1],
      [3, 2, 5, 1, 4],
      [3, 2, 5, 4, 1],
      [3, 4, 1, 2, 5],
      [3, 4, 1, 5, 2],
      [3, 4, 2, 1, 5],
      [3, 4, 2, 5, 1],
      [3, 4, 5, 1, 2],
      [3, 4, 5, 2, 1],
      [3, 5, 1, 2, 4],
      [3, 5, 1, 4, 2],
      [3, 5, 2, 1, 4],
      [3, 5, 2, 4, 1],
      [3, 5, 4, 1, 2],
      [3, 5, 4, 2, 1],
      [4, 1, 2, 3, 5],
      [4, 1, 2, 5, 3],
      [4, 1, 3, 2, 5],
      [4, 1, 3, 5, 2],
      [4, 1, 5, 2, 3],
      [4, 1, 5, 3, 2],
      [4, 2, 1, 3, 5],
      [4, 2, 1, 5, 3],
      [4, 2, 3, 1, 5],
      [4, 2, 3, 5, 1],
      [4, 2, 5, 1, 3],
      [4, 2, 5, 3, 1],
      [4, 3, 1, 2, 5],
      [4, 3, 1, 5, 2],
      [4, 3, 2, 1, 5],
      [4, 3, 2, 5, 1],
      [4, 3, 5, 1, 2],
      [4, 3, 5, 2, 1],
      [4, 5, 1, 2, 3],
      [4, 5, 1, 3, 2],
      [4, 5, 2, 1, 3],
      [4, 5, 2, 3, 1],
      [4, 5, 3, 1, 2],
      [4, 5, 3, 2, 1],
      [5, 1, 2, 3, 4],
      [5, 1, 2, 4, 3],
      [5, 1, 3, 2, 4],
      [5, 1, 3, 4, 2],
      [5, 1, 4, 2, 3],
      [5, 1, 4, 3, 2],
      [5, 2, 1, 3, 4],
      [5, 2, 1, 4, 3],
      [5, 2, 3, 1, 4],
      [5, 2, 3, 4, 1],
      [5, 2, 4, 1, 3],
      [5, 2, 4, 3, 1],
      [5, 3, 1, 2, 4],
      [5, 3, 1, 4, 2],
      [5, 3, 2, 1, 4],
      [5, 3, 2, 4, 1],
      [5, 3, 4, 1, 2],
      [5, 3, 4, 2, 1],
      [5, 4, 1, 2, 3],
      [5, 4, 1, 3, 2],
      [5, 4, 2, 1, 3],
      [5, 4, 2, 3, 1],
      [5, 4, 3, 1, 2],
      [5, 4, 3, 2, 1],
    ];
  });

  afterEach(() => {
    let actualOutput = solution.getPermutations(input.array);
    actualOutput = actualOutput.map((array) => array.sort());
    expectedOutput = expectedOutput.map((array) => array.sort());
    expect(actualOutput.length).toBe(expectedOutput.length);
    expect(actualOutput).toEqual(expect.arrayContaining(expectedOutput));
  });
};
